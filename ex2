import scipy.io.wavfile as wav
import scipy.signal as signal
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import os

frequency, data = wav.read('signal.WAV')
length = len(data)
print("\nFrequency:  ", frequency, "   Length:   ", length, "\n")

if frequency % 2 == 1:
    frequency += 1

def hilbert(data):
    analytical_signal = signal.hilbert(data)
    amplitude_envelope = np.abs(analytical_signal)
    return amplitude_envelope

data_am = hilbert(data)

data_1 = data[250 * frequency:(250 * frequency + frequency // 2)]

data_am_1 = hilbert(data_1)

plt.plot(data_1)
plt.plot(data_am_1, "-o")
plt.xlabel("Номер")
plt.ylabel("Амплитуда")
plt.title("Сигнал")
plt.show()

new_frequency = frequency
data_resampled = data_am

frame_width = int(0.5 * new_frequency)

w, h = frame_width, len(data_resampled) // frame_width

image = Image.new('RGB', (w, h))

px, py = 0, 0
max = np.max(data_resampled)
min = np.min(data_resampled)
for p in range(len(data_resampled)):
    lum = int((data_resampled[p] - min) / (max - min) * 255)
    if lum < 0: lum = 0
    if lum > 255: lum = 255
    image.putpixel((px, py), (50, lum, 50))
    px += 1
    if px >= w:
        if (py % 1) == 0:
            print(f"Saved {py} of {h}")
        px = 0
        py += 1
        if py >= h:
            break
            
image = image.resize((w, 3 * h))
image.save('Sputnic.png')
print("Successfully saved image 'Sputnic.png'")

impulse_length = 84  # РАЗМЕР ИМПУЛЬСА, 7 ПОЛОС - 6 ПЕРЕПАДОВ, МЕЖДУ КОТОРЫМИ 14, ИТОГО 84
delta = 7  # ТОЧКИ МЕЖДУ МАКС. И МИН., МЕЖДУ ДВУМЯ МАКС. И ДВУМЯ МИН. В 2 РАЗА БОЛЬШЕ (14)


def impulse(data_resampled, k):
    n = k
    for i in range(k, len(data_resampled) - 91):
        wrong = 0
        for j in range(0, impulse_length, 2 * delta):
            if data_resampled[i + j] > 0.3 * max or abs(
                    data_resampled[i + j + delta] - data_resampled[i + j]) > max * 0.7 or abs(
                    data_resampled[i + j + delta] - data_resampled[i + j]) < 0.3 * max:
                wrong += 1
        if wrong <= 2:
            n = i
            break
    return n

data_straight = np.zeros((len(data_resampled), 1))

num = 0
current = impulse(data_am, 0)

while current <= len(data_resampled) - new_frequency // 2:
    for j in range(current, current + new_frequency // 2):
        data_straight[num] = data_resampled[j + 32]
        # "+ 32"  - ПОДГОНКА ИЗОБРАЖЕНИЯ, ЧТОБЫ НАЧИНАЛОСЬ С ПОЛОС
        num += 1

    k = current + new_frequency // 2 - 500
    current = impulse(data_resampled, k)

w, h = frame_width, len(data_straight) // frame_width
image = Image.new('RGB', (w, h))
px, py = 0, 0
max = np.max(data_straight)
min = np.min(data_straight)
for p in range(len(data_straight)):
    lum = int((data_straight[p] - min) / (max - min) * 255)
    if lum < 0: lum = 0
    if lum > 255: lum = 255
    image.putpixel((px, py), (50, lum, 50))
    px += 1
    if px >= w:
        if (py % 1) == 0:
            print(f"Saved {py} of {h}")
        px = 0
        py += 1
        if py >= h:
            break
            
image = image.resize((w, 3 * h))
image.save('Straight_picture.png')
print("Successfully saved image 'Straight_picture.png'")
